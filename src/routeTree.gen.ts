/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardssRouteRouteImport } from './routes/dashboardss/route'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as DashboardssIndexRouteImport } from './routes/dashboardss/index'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AppProductsIndexRouteImport } from './routes/_app/products/index'
import { Route as AppProductsNotFoundRouteImport } from './routes/_app/products/not-found'
import { Route as AppProductsIdRouteImport } from './routes/_app/products/$id'

const DashboardssRouteRoute = DashboardssRouteRouteImport.update({
  id: '/dashboardss',
  path: '/dashboardss',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardssIndexRoute = DashboardssIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardssRouteRoute,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppProductsIndexRoute = AppProductsIndexRouteImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppProductsNotFoundRoute = AppProductsNotFoundRouteImport.update({
  id: '/products/not-found',
  path: '/products/not-found',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppProductsIdRoute = AppProductsIdRouteImport.update({
  id: '/products/$id',
  path: '/products/$id',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboardss': typeof DashboardssRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof AppIndexRoute
  '/dashboardss/': typeof DashboardssIndexRoute
  '/products/$id': typeof AppProductsIdRoute
  '/products/not-found': typeof AppProductsNotFoundRoute
  '/products': typeof AppProductsIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof AppIndexRoute
  '/dashboardss': typeof DashboardssIndexRoute
  '/products/$id': typeof AppProductsIdRoute
  '/products/not-found': typeof AppProductsNotFoundRoute
  '/products': typeof AppProductsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/auth': typeof AuthRouteRouteWithChildren
  '/dashboardss': typeof DashboardssRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/_app/': typeof AppIndexRoute
  '/dashboardss/': typeof DashboardssIndexRoute
  '/_app/products/$id': typeof AppProductsIdRoute
  '/_app/products/not-found': typeof AppProductsNotFoundRoute
  '/_app/products/': typeof AppProductsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/auth'
    | '/dashboardss'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/dashboardss/'
    | '/products/$id'
    | '/products/not-found'
    | '/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/dashboardss'
    | '/products/$id'
    | '/products/not-found'
    | '/products'
  id:
    | '__root__'
    | '/_app'
    | '/auth'
    | '/dashboardss'
    | '/auth/login'
    | '/auth/register'
    | '/_app/'
    | '/dashboardss/'
    | '/_app/products/$id'
    | '/_app/products/not-found'
    | '/_app/products/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  DashboardssRouteRoute: typeof DashboardssRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboardss': {
      id: '/dashboardss'
      path: '/dashboardss'
      fullPath: '/dashboardss'
      preLoaderRoute: typeof DashboardssRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboardss/': {
      id: '/dashboardss/'
      path: '/'
      fullPath: '/dashboardss/'
      preLoaderRoute: typeof DashboardssIndexRouteImport
      parentRoute: typeof DashboardssRouteRoute
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_app/products/': {
      id: '/_app/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof AppProductsIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/products/not-found': {
      id: '/_app/products/not-found'
      path: '/products/not-found'
      fullPath: '/products/not-found'
      preLoaderRoute: typeof AppProductsNotFoundRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/products/$id': {
      id: '/_app/products/$id'
      path: '/products/$id'
      fullPath: '/products/$id'
      preLoaderRoute: typeof AppProductsIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppProductsIdRoute: typeof AppProductsIdRoute
  AppProductsNotFoundRoute: typeof AppProductsNotFoundRoute
  AppProductsIndexRoute: typeof AppProductsIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppProductsIdRoute: AppProductsIdRoute,
  AppProductsNotFoundRoute: AppProductsNotFoundRoute,
  AppProductsIndexRoute: AppProductsIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface DashboardssRouteRouteChildren {
  DashboardssIndexRoute: typeof DashboardssIndexRoute
}

const DashboardssRouteRouteChildren: DashboardssRouteRouteChildren = {
  DashboardssIndexRoute: DashboardssIndexRoute,
}

const DashboardssRouteRouteWithChildren =
  DashboardssRouteRoute._addFileChildren(DashboardssRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  DashboardssRouteRoute: DashboardssRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
